pipeline {
    agent any
    
    tools {
        maven 'Maven'  // Name of Maven installation in Jenkins
        jdk 'JDK11'    // Name of JDK installation in Jenkins
    }
    
    environment {
        APP_NAME = "demo"
        DEPLOY_DIR = "/opt/java-apps"
        TOMCAT_DIR = "/var/lib/tomcat9/webapps" // If deploying to Tomcat
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/your-username/your-repo.git'
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean package'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    // Create deployment directory if it doesn't exist
                    sh "mkdir -p ${DEPLOY_DIR}"
                    
                    // Stop previous running instance if any
                    sh "pkill -f ${APP_NAME}.jar || true"
                    
                    // Copy new JAR file
                    sh "cp target/${APP_NAME}-*.jar ${DEPLOY_DIR}/${APP_NAME}.jar"
                    
                    // Start application
                    sh """
                    nohup java -jar ${DEPLOY_DIR}/${APP_NAME}.jar \
                    > ${DEPLOY_DIR}/app.log 2>&1 &
                    """
                    
                    // Alternative: Deploy to Tomcat (uncomment if using Tomcat)
                    // sh "cp target/${APP_NAME}-*.war ${TOMCAT_DIR}/${APP_NAME}.war"
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    // Wait for app to start
                    sleep(time: 10, unit: 'SECONDS')
                    
                    // Verify application is running
                    def response = sh(script: "curl -s http://localhost:8080", returnStdout: true).trim()
                    if (!response.contains("Hello from Java App")) {
                        error "Application health check failed!"
                    } else {
                        echo "Application is running successfully!"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed - cleaning up workspace'
            cleanWs()
        }
        success {
            slackSend(color: 'good', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'")
        }
        failure {
            slackSend(color: 'danger', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'")
        }
    }
}
